import 'dart:io';
import 'package:flutter/material.dart';
import 'package:youtube_explode_dart/youtube_explode_dart.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:path_provider/path_provider.dart';

final yt = YoutubeExplode();
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  permission();
  runApp(const MyApp());
}

Future<void> permission() async {
  var status = await Permission.storage.status;
  if (status.isDenied) {
    // We didn't ask for permission yet or the permission has been denied before but not permanently.
    if (await Permission.contacts.request().isGranted) {
      // Either the permission was already granted before or the user just granted it.
    }
    // You can request multiple permissions at once.
    Map<Permission, PermissionStatus> statuses = await [
      Permission.location,
      Permission.storage,
    ].request();
    print(statuses[Permission.location]);
  }
  // You can can also directly ask the permission about its status.
  if (await Permission.storage.isRestricted) {
    // The OS restricts access, for example because of parental controls.
  }
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Youtube Video Downloader',
      theme: ThemeData.dark().copyWith(
        appBarTheme: const AppBarTheme(
          backgroundColor: Color.fromARGB(255, 0, 0, 0),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            primary: const Color.fromARGB(255, 0, 0, 0),
          ),
        ),
      ),
      home: const MyHomePage(title: 'Youtube Video Downloader'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;
  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String url_bae = '';

  void Tusu(String url) async {
    // Directory directory = (await getExternalStorageDirectory())!;
    // Directory('/storage/emulated/0/Dcim').createSync();
    Directory('/storage/emulated/0/Dcim').createSync();
    await download(url);
    yt.close();
    exit(0);
  }

  Future<void> download(String id) async {
    // Get video metadata.
    var video = await yt.videos.get(id);

    // Get the video manifest.
    var manifest = await yt.videos.streamsClient.getManifest(id);
    var streams = manifest.videoOnly;

    // Get the audio track with the highest bitrate.
    var audio = streams.first;
    var audioStream = yt.videos.streamsClient.get(audio);

    // Compose the file name removing the unallowed characters in windows.
    var fileName = '${video.title}.${audio.container.name}'
        .replaceAll(r'\', '')
        .replaceAll('/', '')
        .replaceAll('*', '')
        .replaceAll('?', '')
        .replaceAll('"', '')
        .replaceAll('<', '')
        .replaceAll('>', '')
        .replaceAll('|', '');
    var file = File('Downloading/$fileName');

    // Delete the file if exists.
    if (file.existsSync()) {
      file.deleteSync();
    }

    // Open the file in writeAppend.
    var output = file.openWrite(mode: FileMode.writeOnlyAppend);

    // Track the file download status.
    var len = audio.size.totalBytes;
    var count = 0;

    // Create the message and set the cursor position.
    var msg = 'Downloading ${video.title}.${audio.container.name}';
    print(msg);

    var progressBar;
    await for (final data in audioStream) {
      count += data.length;
      var progress = ((count / len) * 100).ceil();
      output.add(data);
      print("Progress   ${progress}");
    }
    await output.close();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Padding(
              padding: const EdgeInsets.all(10),
              child: TextField(
                onChanged: ((value) {
                  url_bae = value;
                  setState(() {});
                }),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                if (url_bae.isEmpty) {
                  print("Enter url");
                } else {
                  Tusu(url_bae);
                }
              },
              child: const Text('Download Video'),
            ),
          ],
        ),
      ),
    );
  }
}
